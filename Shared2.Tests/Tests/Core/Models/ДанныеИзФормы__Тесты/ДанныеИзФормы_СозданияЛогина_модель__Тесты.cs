using DBPSA.Shared.Db.Entities.Таблицы;
using DBPSA.Shared.Models;
using DBPSA.Shared2.Tests.Обслуживание_Тестов;
using NUnit.Framework;

namespace DBPSA.Shared2.Tests.Tests.Core.Models.ДанныеИзФормы__Тесты
{
    [TestFixture]
    public class ДанныеИзФормы_СозданияЛогина_модель__Тесты : Init
    {
        [Test]
        public void ДанныеИзФормы_СозданияЛогина_модель__Не_валидные_данные() 
        {
            ДанныеИзФормы_СозданияЛогина_модель валиднаяМодель =
                ГенераторМоделей.ПолучитьВалиднуюМодель<ДанныеИзФормы_СозданияЛогина_модель>();
            
            валиднаяМодель.email += "@sils.local";
            Assert.False(валиднаяМодель.Валидна());

            IДанныеИзФормы_СозданияЛогина_модель проверочнаяМодель =
                new ДанныеИзФормы_СозданияЛогина_модель(валиднаяМодель);

            foreach (var измененнаяМодель in Рефлектор.ПолучитьМоделиСИзмененнымСвойством(проверочнаяМодель))
            {
                Assert.True(измененнаяМодель.НеВалидна());
            }
        }

        [Test]
        public void ДанныеИзФормы_СозданияЛогина_модель__Валидные_данные()
        {
            {
                IДанныеИзФормы_СозданияЛогина_модель модель =
                    ГенераторМоделей.ПолучитьВалиднуюМодель<ДанныеИзФормы_СозданияЛогина_модель>();

                модель.email = "123456789@sils.local";
 
                Assert.IsNotNull(модель);

                var b = модель.Валидна();
                var результатыВалидации = модель.ПолучитьРезультатыВалидации();

                PrintTestContext(модель);
                if (!b)
                    PrintTestContext(результатыВалидации);
                
                Assert.AreEqual(результатыВалидации.Count, 0);
                Assert.True(b);
                
                
                Assert.IsNull(модель.получитьИсключение());
                PrintTestContext(модель.получитьИсключение()?.Message);
            }
        }
    }
}